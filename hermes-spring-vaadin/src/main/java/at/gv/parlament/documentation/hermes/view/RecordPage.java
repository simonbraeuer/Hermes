package at.gv.parlament.documentation.hermes.view;

import org.springframework.beans.factory.annotation.Autowired;

import at.gv.parlament.documentation.hermes.controller.IRecordPageController;
import at.gv.parlament.documentation.hermes.domain.RecordSetting;
import at.gv.parlament.documentation.hermes.domain.RecordSource;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.TextField;

@SpringComponent
public class RecordPage extends CustomComponent implements IRecordPage{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 6618082733809197543L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TextField fileNameTextField;
	@AutoGenerated
	private ComboBox recordSourceComboBox;
	@AutoGenerated
	private Button actionButton;
	private BeanItemContainer<RecordSource> recordSourceContainer;
	private boolean isRecording;
	
	
	private IRecordPageController controller;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RecordPage() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// actionButton
		actionButton = new Button();
		actionButton.setCaption("Starte Aufnahme");
		actionButton.setImmediate(true);
		actionButton.setWidth("-1px");
		actionButton.setHeight("-1px");
		mainLayout.addComponent(actionButton, "top:56.0px;left:220.0px;");
		actionButton.addClickListener(new ClickActionListener());
		
		// recordSourceComboBox
		recordSourceComboBox = new ComboBox();
		recordSourceContainer = new BeanItemContainer<RecordSource>(RecordSource.class);
		recordSourceComboBox.setContainerDataSource(recordSourceContainer);
		recordSourceComboBox.setCaption("Aufnahmequelle");
		recordSourceComboBox.setImmediate(false);
		recordSourceComboBox.setWidth("-1px");
		recordSourceComboBox.setHeight("-1px");
		recordSourceComboBox.addValueChangeListener(new RecordSourceChangeListener());
		mainLayout.addComponent(recordSourceComboBox,
				"top:116.0px;left:42.0px;");
		
		
		// fileNameTextField
		fileNameTextField = new TextField();
		fileNameTextField.setCaption("Dateiname");
		fileNameTextField.setImmediate(false);
		fileNameTextField.setWidth("-1px");
		fileNameTextField.setHeight("-1px");
		mainLayout.addComponent(fileNameTextField, "top:56.0px;left:40.0px;");
		
		return mainLayout;
	}

	@Override
	public void setRecordSetting(RecordSetting setting, boolean isRecording) {
		this.isRecording = isRecording;
		if(isRecording) 
		{
			actionButton.setCaption("Aufnahme beenden");
		} else {
			actionButton.setCaption("Aufnahme starten");
		}
		
		fileNameTextField.setEnabled(!isRecording);
		
		if(setting == null) 
		{
			fileNameTextField.setValue("");
		} else {
			fileNameTextField.setValue(setting.getFileName());
		}
	}
	
	public class ClickActionListener implements Button.ClickListener {

		/**
		 * 
		 */
		private static final long serialVersionUID = 4119731419664394109L;

		@Override
		public void buttonClick(ClickEvent event) {
			controller.setFileName(fileNameTextField.getValue());
			controller.recordAction(!isRecording);
		}
		
	}
	
	public class RecordSourceChangeListener implements ValueChangeListener {

		/**
		 * 
		 */
		private static final long serialVersionUID = -1595250871834894400L;

		@Override
		public void valueChange(ValueChangeEvent event) {
			controller.selectRecordSource((RecordSource) event.getProperty().getValue());
		}

		
	}
	
	//public class SourceSelectListener implements ComboBox.

	@Autowired
	@Override
	public void setController(IRecordPageController controller) {
		this.controller = controller;
		recordSourceContainer.addAll(controller.getRecordSources());
	}

}
