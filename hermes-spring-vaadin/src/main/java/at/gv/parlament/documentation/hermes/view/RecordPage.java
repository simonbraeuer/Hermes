package at.gv.parlament.documentation.hermes.view;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import at.gv.parlament.documentation.hermes.controller.IRecordPageController;
import at.gv.parlament.documentation.hermes.domain.RecordSetting;
import at.gv.parlament.documentation.hermes.domain.RecordSource;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.spring.annotation.VaadinUIScope;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.TextField;

@SpringComponent
@VaadinUIScope
public class RecordPage extends CustomComponent implements IRecordPage{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private ListSelect recordSourceList;
	@AutoGenerated
	private TextField fileNameTextField;
	@AutoGenerated
	private Button actionButton;
	private static final long serialVersionUID = 6618082733809197543L;
	private BeanItemContainer<RecordSource> recordSourceContainer;
	private boolean isRecording;
	
	private IRecordPageController controller;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RecordPage() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		actionButton.addClickListener(new ClickActionListener());
		recordSourceContainer = new BeanItemContainer<RecordSource>(RecordSource.class);
		recordSourceList.setContainerDataSource(recordSourceContainer);
		recordSourceList.addValueChangeListener(new RecordSourceChangeListener());
		
	}

	@Override
	public void setRecordSetting(RecordSetting setting, boolean isRecording) {
		this.isRecording = isRecording;
		if(isRecording) 
		{
			actionButton.setCaption("Aufnahme beenden");
		} else {
			actionButton.setCaption("Aufnahme starten");
		}

		setFormData(setting);
		
		fileNameTextField.setEnabled(!isRecording);
	}
	
	private void setFormData(RecordSetting setting) {
		if(setting == null) 
		{
			fileNameTextField.setValue("");
		} else {
			fileNameTextField.setValue(setting.getFileName());
		}
	}
	
	private RecordSetting getFormData() {
		return new RecordSetting(fileNameTextField.getValue());
	}
	
	@SuppressWarnings("serial")
	public class ClickActionListener implements Button.ClickListener {

		@Override
		public void buttonClick(ClickEvent event) {
			controller.recordAction(!isRecording, getFormData());
		}
		
	}
	
	@SuppressWarnings("serial")
	public class RecordSourceChangeListener implements ValueChangeListener {

		@Override
		public void valueChange(ValueChangeEvent event) {
			controller.selectRecordSource((RecordSource) event.getProperty().getValue());
		}

		
	}

	@Autowired
	@Override
	public void setController(IRecordPageController controller) {
		this.controller = controller;
		this.controller.setRecordPage(this);
	}

	@Override
	public void onDisplayPage() {
		// this function is called when page is shown.
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// actionButton
		actionButton = new Button();
		actionButton.setCaption("Starte Aufnahme");
		actionButton.setImmediate(true);
		actionButton.setWidth("240px");
		actionButton.setHeight("-1px");
		mainLayout.addComponent(actionButton, "top:80.0px;left:220.0px;");
		
		// fileNameTextField
		fileNameTextField = new TextField();
		fileNameTextField.setCaption("Dateiname");
		fileNameTextField.setImmediate(true);
		fileNameTextField.setWidth("240px");
		fileNameTextField.setHeight("-1px");
		mainLayout.addComponent(fileNameTextField, "top:40.0px;left:220.0px;");
		
		// recordSourceList
		recordSourceList = new ListSelect();
		recordSourceList.setCaption("Aufnahmequelle");
		recordSourceList.setImmediate(true);
		recordSourceList.setWidth("158px");
		recordSourceList.setHeight("60px");
		mainLayout.addComponent(recordSourceList, "top:40.0px;left:40.0px;");
		
		return mainLayout;
	}

	@Override
	public void setRecordSources(List<RecordSource> sources) {
		recordSourceContainer.addAll(sources);
	}

	@Override
	public void setDefaultSource(RecordSource defaultSource) {
		recordSourceList.setNullSelectionItemId(defaultSource);
	}

}
