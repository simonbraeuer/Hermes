package at.gv.parlament.documentation.hermes.view;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

import org.springframework.beans.factory.annotation.Autowired;

import scala.annotation.cloneable;
import at.gv.parlament.documentation.hermes.controller.IUploadVideoPageController;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.FileResource;
import com.vaadin.server.Page;
import com.vaadin.server.ThemeResource;
import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.spring.annotation.VaadinUIScope;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;

@SpringComponent
@VaadinUIScope
public class UploadVideoPage extends CustomComponent implements IUploadVideoPage {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private Embedded video;

	@AutoGenerated
	private Button saveButton;

	@AutoGenerated
	private TextField fileNameTextField;

	@AutoGenerated
	private Upload videoFileUpload;

	/**
	 * 
	 */
	private static final long serialVersionUID = 4485407104851140289L;

	private IUploadVideoPageController controller;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UploadVideoPage() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		VideoUploader receiver = new VideoUploader();
		videoFileUpload.addSucceededListener(receiver);
		videoFileUpload.setReceiver(receiver);
	}

	@Override
	public void onDisplayPage() {
	}

	@Autowired
	@Override
	public void setController(IUploadVideoPageController controller) {
		this.controller = controller;
		this.controller.setUploadVideoPage(this);
	}

	@Override
	public void resetWithMessage(String text) {
		if(text != null && !text.equals("")) {
			Notification.show(text);	
		}
		fileNameTextField.clear();
		
		video.setSource(new ThemeResource(
				"img/component/embedded_icon.png"));
		video.setType(1);
		video.setMimeType("image/png");
		video.setVisible(false);
	}

	class VideoUploader implements Receiver, SucceededListener {
	    /**
		 * 
		 */
		private static final long serialVersionUID = -4452730377757210675L;
		public File file;
	    public String mimeType;
	    
	    public OutputStream receiveUpload(String filename,
	                                      String mimeType) {
	        // Create upload stream
	    	this.mimeType = mimeType;
	        BufferedOutputStream fos = null; // Stream to write to
	        try {
	            // Open the file for writing.
	            file = new File("/opt/files/" + filename);
	            fos = new BufferedOutputStream(new FileOutputStream(file));
	        } catch (final java.io.FileNotFoundException e) {
	            new Notification("Could not open file<br/>",
	                             e.getMessage(),
	                             Notification.Type.ERROR_MESSAGE)
	                .show(Page.getCurrent());
	            return null;
	        }
	        return fos; // Return the output stream to write to
	    }

	    public void uploadSucceeded(SucceededEvent event) {
	        // Show the uploaded file in the image viewer
	        video.setVisible(true);
	        //video.setSource(new FileResource(file));
	    	//video.setType(1);
			//video.setMimeType(mimeType);
	    }
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// videoFileUpload
		videoFileUpload = new Upload();
		videoFileUpload.setImmediate(false);
		videoFileUpload.setWidth("-1px");
		videoFileUpload.setHeight("-1px");
		mainLayout.addComponent(videoFileUpload, "top:80.0px;left:40.0px;");
		
		// fileNameTextField
		fileNameTextField = new TextField();
		fileNameTextField.setCaption("Bezeichnung");
		fileNameTextField.setImmediate(false);
		fileNameTextField.setWidth("-1px");
		fileNameTextField.setHeight("-1px");
		mainLayout.addComponent(fileNameTextField, "top:40.0px;left:40.0px;");
		
		// saveButton
		saveButton = new Button();
		saveButton.setCaption("Speichern");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		mainLayout.addComponent(saveButton, "top:120.0px;left:37.0px;");
		
		// video
		video = new Embedded();
		video.setImmediate(false);
		video.setWidth("100.0%");
		video.setHeight("100.0%");
		video.setSource(new ThemeResource("img/component/embedded_icon.png"));
		video.setType(1);
		video.setMimeType("image/png");
		mainLayout.addComponent(video,
				"top:160.0px;right:171.0px;bottom:58.0px;left:40.0px;");
		
		return mainLayout;
	};
	
}
